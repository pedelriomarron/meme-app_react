{"version":3,"sources":["serviceWorker.ts","components/Title.tsx","components/Meme.tsx","utils.ts","services/memes.ts","components/Search.tsx","components/MemeContainer.tsx","components/Root.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Title","className","this","props","children","React","Meme","href","post","name","image","target","src","alt","Utils","url","headers","fetch","response","json","data","getMemesBysubreddit","a","subreddit","n","request","getMemesBySearch","q","Search","state","search","handleChange","bind","e","console","log","value","setState","placeholder","onChange","type","onClick","handleSearch","MemeContainer","isFetch","memes","dom","map","meme","i","push","key","title","postLink","length","showMemes","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a19892cf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from 'react';\r\n\r\nexport class Title extends React.Component<{}, {}> {\r\n    render() {\r\n        return (\r\n            <h1 className=\"title\">{this.props.children}</h1>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\n\r\ninterface IProps {\r\n    name: string;\r\n    image: string;\r\n    post: string\r\n}\r\n\r\ninterface IState {\r\n    isFetch: boolean\r\n}\r\n\r\n\r\nexport class Meme extends React.PureComponent<IProps, IState> {\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"single-meme\">\r\n                <h3> <a href={this.props.post}>{this.props.name}</a></h3>\r\n                <a href={this.props.image} target=\"_blank\"> <img src={this.props.image} alt={this.props.name} /></a>\r\n            </div>\r\n        )\r\n    }\r\n}","export class Utils {\r\n\r\n    static async  request(url: string, headers: any = {}) {\r\n        let response = await fetch(url, headers);\r\n        let data = await response.json()\r\n        return data;\r\n    }\r\n\r\n\r\n}","import { Utils } from \"../utils\"\r\n\r\n\r\nexport async function getMemesBysubreddit(subreddit: string = \"memes\", n: number = 2) {\r\n\r\n    let data = await Utils.request(`https://meme-api.herokuapp.com/gimme/${subreddit}/${n}`);\r\n    return data\r\n}\r\n\r\n\r\nexport async function getMemesBySearch(q: string) {\r\n    let data\r\n    try {\r\n        data = await Utils.request(`https://meme-api.herokuapp.com/gimme/memes/${q}`);\r\n\r\n    } catch (error) {\r\n        data = await Utils.request(`https://meme-api.herokuapp.com/gimme/memes/0`);\r\n\r\n    }\r\n    return data\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\ninterface IProps {\r\n    //handleSearch: (ev: React.MouseEvent<HTMLButtonElement>) => void\r\n    handleSearch: (str: string) => void\r\n\r\n}\r\n\r\ninterface IState {\r\n    search: string\r\n}\r\n\r\n\r\nexport class Search extends React.PureComponent<IProps, IState> {\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.state = { search: '' }\r\n        //Super necesario\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n    }\r\n\r\n\r\n    handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\r\n        console.log(e.target.value)\r\n        this.setState({ search: e.target.value })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"search-container\">\r\n                <input placeholder=\"Numero de Memes\" value={this.state.search} onChange={this.handleChange} type=\"text\" className=\"search-input\"></input>\r\n                <button className=\"search-btn\" onClick={() => this.props.handleSearch(this.state.search)}>Search</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Meme } from './Meme';\r\nimport { getMemesBysubreddit, getMemesBySearch } from '../services/memes';\r\nimport { Title } from './Title';\r\nimport { Search } from './Search';\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    name: string;\r\n    isFetch: boolean,\r\n    memes: any\r\n}\r\n\r\n\r\nexport class MemeContainer extends React.PureComponent<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: 'name dep state',\r\n            isFetch: true,\r\n            memes: { memes: [] }\r\n        }\r\n        //Necesario al final\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        console.log(\"mount\")\r\n        this.setState({ name: 'componente montado', memes: await getMemesBysubreddit(\"memes\", 10), isFetch: false })\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        console.log(\"update\")\r\n    }\r\n\r\n\r\n    showMemes() {\r\n        let dom: any = []\r\n        this.state.memes.memes.map((meme: any, i: number) => {\r\n            dom.push(<Meme key={i} name={meme.title} image={meme.url} post={meme.postLink}></Meme>)\r\n        })\r\n        return dom\r\n    }\r\n\r\n\r\n    // handleSearch(e: React.MouseEvent<HTMLButtonElement>): void {\r\n    async handleSearch(e: string) {\r\n        let response = await getMemesBySearch(e)\r\n        console.log(response)\r\n        console.log(e)\r\n        this.setState({\r\n            memes: response\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        /*\r\n                if (this.state.isFetch) {\r\n                    return <p>Loading..</p>\r\n                }\r\n        */\r\n        return (\r\n\r\n\r\n            <React.Fragment>\r\n                <Search handleSearch={this.handleSearch}></Search>\r\n                <p>{this.state.isFetch && 'Loading...'}</p>\r\n\r\n                <p>{!this.state.memes.memes.length && 'Nada que mostrar'}</p>\r\n\r\n                <section className=\"memes-container\">\r\n                    {this.showMemes()}\r\n                </section>\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n","import * as React from 'react';\r\nimport { Title } from './Title';\r\nimport { MemeContainer } from './MemeContainer';\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\ninterface IState {\r\n\r\n}\r\n\r\n\r\nexport class Root extends React.PureComponent<IProps, IState> {\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Title>Meme App</Title>\r\n                <MemeContainer></MemeContainer>\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Root } from './components/Root';\nimport './css/meme.css'\n\nReactDOM.render(<Root></Root>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}